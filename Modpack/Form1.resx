<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAEACABoBQAANgAAACAgAAABAAgAqAgAAJ4FAAAwMAAAAQAIAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAL6+vgCTk5MAnJycAKWlpQC3t7cAjIyMAJWV
        lQCnp6cA29vbALCwsACFhYUAjo6OAMLCwgCXl5cAy8vLAKCgoACpqakA3d3dAH5+fgCysrIA5ubmALu7
        uwCQkJAAxMTEAJmZmQCioqIA1tbWAHd3dwCrq6sA39/fAICAgAC0tLQAiYmJAJubmwCkpKQA2NjYAIKC
        ggCLi4sAlJSUAMjIyACdnZ0A0dHRAHt7ewCvr68AuLi4AI2NjQDBwcEA9fX1AJaWlgDKysoA09PTALGx
        sQCGhoYAurq6AO7u7gCYmJgAoaGhAKqqqgB/f38As7OzAIiIiAC8vLwAkZGRAJqamgDOzs4Ao6OjANfX
        1wCsrKwAtbW1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvLy8vLy8vLy8vLy8vLy8vNjY2NjY2
        NjY2NjY2NjY2NhQUFBQUFBQUFBQUFBQUFBQdHR0dHR0dEQgdHR0dHR0dQiMjIyMjQkAcMkJCQhojQiks
        Jw4JGSIuIhM9A0QiFykxQxYBGBgVAjAhLA0rNwQxDDUtJRwgAyUPOAU4ISEALjUVFjwzLT8ZEBkgBitB
        RDUTOxAHOT5BPxgqCygTHxMTHBwcQ0EFPzo8HhIkORwcHEFBQUELGwU6Bg8+ISJBQUECAgIhJQoLJigC
        KAICAgICJiYmBgYwBgYmJiYmJiYmJi0tLS0tLS0tLS0tLS0tLS00NDQ0NDQ0NDQ0NDQ0NDQ0AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAAAAC/v78Ar7CwAFhYWACwsLAAoaGhAKKh
        oQCDg4MA29vbAHR0dADMzMwAZWVlAL29vQCurq4An5+fAPf39wCQkJAA6OjoAIGBgQDZ2dkAcnJyAMrK
        ygC7u7sAVFRUAKysrACdnZ0Ajo6OAH9/fwDX19cAcHBwAMjIyAC5ubkAqqqqAPPz8wCMjIwA5OTkAH19
        fQBubm4AxsbGALe3twBQUFAAmZmZAIqKigB7e3sAbGxsAMTExAC1tbUApqamAJeXlwCIiIgAeXl5ANHR
        0QBqamoAwsLCAKmoqQCzs7MApKSkAJWVlQDe3t4Ad3d3AM/PzwDAwMAAsbGxAKytrACioqIAk5OTAISE
        hAB1dXUAzc3NAGZmZgC+vr4AycnIAK+vrwCgoKAAkZGRAIKCggBzc3MAy8vLALu8vABkZGQAvLy8AK2t
        rQCenp4Aj4+PAICAgADY2NgAcXFxALq6ugCrq6sAnJycAI2NjQB+fn4A1tbWAG9vbwDHx8cAYGBgALi4
        uACpqakAmpqaAIuLiwB8fHwA1NTUAMXFxQC2trYAT09PAKenpwCYmJgAoqOiAPDw8ADh4eEAenp6ANzd
        3ADS0tIAa2trAMPDwwC0tLQApKWlAE1NTQClpaUAjIuMAJaWlgCHh4cAeHh4ANDQ0ABpaWkAwcHBAFpa
        WgCysrIAS0tLAKOjowCUlJQA7OzsAIWFhQDd3d0AdnZ2AM7OzgBnZ2cAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADg4ODg4ODg4ODg4ODg4ODg4O
        Dg4ODg4ODg4ODg4ODg4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtra2tra2tra2tra2tr
        a2tra2tra2tra2tra2tra2trgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoIQEBAQEBAQEBAQ
        EBAQEBAQEBAQEBAQEBAQEBAQEBAQECIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIibGxsbGxs
        bGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGyEhISEhISEhISEhISEhIRuhDmEhISEhISEhISEhISEhBIS
        EhISEhISEhISEhISBwt4LAcSEhISEhISEhISEhISW1tbG1tbW1sbW1sbVBtbMmBBZFtbVFQbWxtUG1tb
        W1tvb4Z8b29vb3EULAs3cjJvb1NmZDsBgDxvZj8eb29vb4Y7JYU0OztMOiYchShTLzs7JAYyNFIveR6B
        aW1HeoaGFBQJBmklZTUTXYcMO3FLRWYIeQBMhh1LFztDSmlDFBRdXR0fZwiFJ4ElQhVdRiMXGShJaRQ3
        E2JlRzoaRV1dXXFxcTwrYC0KLXxEPiUsS3VVZgOFPXBHJQAkP2UscXFxAAAANCkhGIV8C155PylVYTF8
        AHkvJA0YLRwvGHI8AABPT09PH1xVKEVfHCgGBhcfHx5PH0gZeWJfHwaDfk9NT19fX19fcBY2Xy0kDE9o
        MFYeSld3JGMjAx4eVlZfX19fcnJyci1hGS1yPXBgZlg6ZnITGDNoXwN+cnJycnJycnIDAwMDAz1+AwNQ
        ey5+KEJ+AxxJAhpTWlg9AwMDAwMDA1BQUFBQUFBQUB+HPww4CgwMK4F9dkArWkdQUFBQUFBQYGBgYGBg
        YGBgLgoNV0B/EUoKdW06IQovH2BgYGBgYGB1dXV1dXV1dWhzThhgD3tBeS8uakE6Ui51dXV1dXV1dQQE
        BAQEBAUEKWN0OngpcHU3PwQ/gDeABAQEBAQEBAQEUVFRUVFRURgRS1VLI1kqDVFRUVFRUVFRUVFRUVFR
        UVFhYWFhYWFhYVhYWFhYYWFhYWFhYWFhYWFhYWFhYWFhYXd3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3
        d3d3d3d3QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBSUlJSUlJSUlJSUlJSUlJSUlJSUlJS
        UlJSUlJSUlJSUmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJieHh4eHh4eHh4eHh4eHh4eHh4
        eHh4eHh4eHh4eHh4eHhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAAAACQAAAAAAAAAAAAAAAQAAAAAAAGVlZADLy8sAj4+PAFNTUwCmpqYAampqAC4u
        LgC9vb0AgYGBAEVFRQDU1NQAmJiYAFxcXADr6+sAr6+vAHNzcwDGxsYAsrOyAIqKigCLiooATk5OALS0
        tQChoaEAZWVlAI+PkAC4uLgAkI+QAEBAQAD3+PcAz8/PAPj49wCTk5MAV1dXAObm5gDS09IAqqqqAG5u
        bgDBwcEAhYWFAElJSQCGhYUAnJycAGBgYACKiosAs7OzAIuKiwDKysoAjo6OAFJSUgDh4eEAzc7NAKWl
        pQDOzs0A9/j4APj4+AC8vLwAgICAANPT0wCXl5cAW1tbAIWFhgCurq4AhoWGAHFycgBycnIAxcXFAImJ
        iQBNTU0A3NzcAKCgoADJycgAZGRkAPPz8wC3t7cAe3t7AD8/PwDNzs4Azs7OAKalpgCSkpIAVlZWALy8
        vQCpqakAbW1tAMDAwACEhIQASEhIANfX1wCbm5sAX19fAO7u7gCysrIAs7KyAHZ2dgBiY2IAOjo6AMjJ
        yQDJyckAjY2NAFFRUQDg4OAApKSkAGhoaAAsLCwA9/f3APj39wC7u7sAf39/ANLS0gCWlpYAWlpaAOnp
        6QCtra0AcXFxAMTExACIiIgATExMANvb2wBiY2MAn5+fAGNjYwC2trYAenp6AKSkpQDNzc0AkZGRAFVV
        VQD39/gA+Pf4AOTk5ACoqKgAbGxsAL+/vwCDg4MAR0dHAHFxcgCampoAXl5eAIiIiQCxsbEAdXV1AMjI
        yACMjIwAUFBQAN/f3wCjo6MAj5CPAGdnZwDOzc4Aurq6AH5+fgDR0dEAlZWVAFlZWQCsrKwAraysAHBw
        cADDw8MAh4eHAEtLSwDa2toAnp6eAIqLigBiYmIAJiYmAIuLigC1tbUAUVBRAHl5eQA9PT0AzMzMAJCQ
        kABUVFQAp6enAGtrawAvLy8Avr6+AIKCggBGRkYA1dXVAJmZmQCFhoUAXV1dAF5dXQCGhoUAsLCwAHR0
        dACenp8Ax8fHAIqLiwCLi4sAjIuLAE9PTwDe3t4AoqKiAGZmZgD19fUAubm5AH19fQCmpqUA0NDQAJSU
        lABYWFgAq6urAIOCgwBvb28AwsLCAIWGhgCGhoYASkpKANnZ2QCdnZ0A8PDwALS0tAB4eHgAPDw8AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeaGmANRx/NWhoaBxpHoCAfxxpHBxo
        fzVoHGgcHIB/f2gcf4AcHBw2f4CAaWgcHH/ExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTE
        xMTExMTExMTExMTExMRISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhI
        SEjU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NRaWlpaWlpaWlpa
        WlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWloNDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
        DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ1vb29vb29vb29vb29vb29vb29vb29vb29vb29vb29vb29v
        b29vb29vb29vb29vb28hISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEh
        ISGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYExMTExMTExMTEx
        MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTGQkJCQkJCQkJCQkJCQkJCQkJCQkJCQ
        kJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJBERERERERERERERERERERERERERERERMFkwURERERERERE
        RERERERERERERERERESgoKCgoKCgoKCgoKCgoKCgoKCgoKCgdVtVN3WgoKCgoKCgoKCgoKCgoKCgoKCg
        oKBXV1dXV1dXV1dXV1dXV1dXV1dXV1dX0qbGflTSV1dXV1dXV1dXV1dXV1dXV1dXV1ezs7Ozs7Ozs7Oz
        s7Ozs7Ozs7Ozs7Ozs1egntZXs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NsbGxsbDk5bGxsbGw5bGxsOTkuLgo5
        bGwKhCAlOWxsCk28HQoiOZeNqgo5bGxsbGzIyMhsdwJsyMjIyGyt0GxtoUq2t6idl8jIyCC/Ochsd5m2
        oxZsSaM7WUKqyMjIyMhNlE3IrZ9yTUwyTR2jODkkqdA3atZHjU0dahuZYU1NZa1UBKcZpimwSTttyJRN
        NDQBAQEBvANYyHx8HcUJLB2TtnyqqmFutE1Nis12ZXwBfHx8qlAWTXyqbKjWTQEBAQFhYWFgqlXKwkVF
        wg8MjQGuQqphRqqFzapBbnsCUy5hYQHFjGNqYQHOL4bCAWFhYWEQEBAQvFuvj4mJO6R9YWGujmEQEGFP
        Ki6RfiVJA9W8clV0U9W8vNMDtpG8EBAQEBBycnJycnJZ0LxBBLJJchDDxrxycryeR43NSrwQU7FhYsAj
        QUFBcFaYzhBycnJycnIlJSUlJXKrIIRyumadJXJehmpynSWZhRl0gp2doayEg5aNnZ1yH5lBnXLOJSUl
        JSWEhISEhIQVdDOV0bQlhCVmA1O0dwVDeb7KsISEagMLT8A6KdBJmnSeRZ6CVISEhIQ3Nzc3NzeEU9YL
        dEk3N4TDJm0XblNwhJiIsLA3sDophAKjbtZJsHfDbmaaBzc3NzeVlZWVlZVqiDCJjFGVlTcAVYSVxdUp
        xWpqebSmlcV9JEBiWzeVlWpqxWqVlZWVlZVJSUlJSUlJ1RQGFsVJSZV4zJVJxaEgpkkZcGMjGT9jhZ7D
        lhlJSUlJSUlJSUlJSUmmpqampqamSVXD1aampkmjCBmmeVisW6amy8BSWCeCGRmmm6ampqampqampqam
        pqZbW1tbW1tbW1tbW1tbW6Yqa6Zb1bQDuVssghSCqJNJ1dXVplxbW1tbW1tbW1tbW1u5ubm5ubm5ubm5
        ubm5uVtZxhG5izowcLm5BEMEU0sXeHijkwS5ubm5ubm5ubm5ublwcHBwcHBwcHBwcHBwcA6JSrlwDpgn
        UnA9kZ9lXXQSc3OxS1g9cHBwcHBwcHBwcHDLy8vLy8vLy8vLy8vLy3AMenDLmslnAj09mCcEyZ/CuYtP
        nzPLy8vLy8vLy8vLy8uCgoKCgoKCgoKCgoKCgiM71suCI09fUEpVwK4jUs0DCDgn1iOCgoKCgoKCgoKC
        goIEBAQEBAQEBAQEBAQEBIJuXYIErS8Uq5NuD8IEBDM4ibZrMwQEBAQEBAQEBAQEBASRkZGRkZGRkZGR
        kZEzBIJuXVIEBI50wsczTmWRkZEzMzMzkZGRkZGRkZGRkZGRkZEWFhYWFhYWFhYWFhZVzXHXj4ecfb6f
        dxYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhahoaGhoaGhoaGhoXeotom2tomJEr4DKaGhoaGhoaGhoaGh
        oaGhoaGhoaGhoaGhoaEpKSkpKSkpKSkpKSnToaG7oaGh07R9KSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkp
        KSm0tLS0tLS0tLS0tLS0tLS0tLS0tIiItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ6Ojo6Ojo6Ojo6
        Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OjrJycnJycnJycnJycnJycnJycnJycnJ
        ycnJycnJycnJycnJycnJycnJycnJycnJyclPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09P
        T09PT09PT09PT09PT08CAgICAgICAgICApICAhgCAgICAgICAgICAgICAgICAgICAgICAhoCAgICAgIC
        AgJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmKlvS2+vi29vb69
        Lb2lvqWlE72+vi2+oqIroqItvr6+pb2lvr6+K76lvistLaUror5zc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nz
        c3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3Nzc3PQPrjQ0NAoPrg+0NA+0NDQ0NDQ0NDP0D7Q0NDQ0M+40D7Q
        0NDQ0M880M+4tdA+0NCFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWF
        hYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>